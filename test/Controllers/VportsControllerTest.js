/*
 * TelstraProgrammableNetworkAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
 'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.VportsController;
const EndpointPort = testerlib.EndpointPort;
const M100InventoryRegularvportResponse = testerlib.M100InventoryRegularvportResponse;
const M100InventoryRegularvportRequest = testerlib.M100InventoryRegularvportRequest;
const M100InventoryVnfVportResponse = testerlib.M100InventoryVnfVportResponse;
const M100InventoryVnfVportRequest = testerlib.M100InventoryVnfVportRequest;

describe("VportsController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * Create VPort representing a VLAN on a Physical Ethernet Port
     */
    it("should testTestCreateVPortForPhysicalEndpoint1 response", function testTestCreateVPortForPhysicalEndpoint1Test(done) {
        // parameters for the API call
        let body = null;

        controller.create100InventoryRegularvportPost(body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * Create VNF VPort
     */
    it("should testTestCreateVNFVPort1 response", function testTestCreateVNFVPort1Test(done) {
        // parameters for the API call
        let body = null;

        controller.create100InventoryVnfVportPost(body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

});
