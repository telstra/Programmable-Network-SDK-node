/**
 * TelstraProgrammableNetworkAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class DatacentresController {
    /**
     * Get list of all the data centers
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static get100InventoryDatacentersGet(callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/1.0.0/inventory/datacenters'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                let response = '';
                if (_context.response.body) {
                    response = JSON.parse(_context.response.body);
                }
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = parsed.map(model =>
                        _baseController.getObjectMapper().mapObject(model, 'M100InventoryDatacentersResponse'));
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper().mapObject(response, 'ErrorException');
                    mappedObject.reason = 'Request is not correctly formatted';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Request is not correctly formatted',
                        errorCode: 400,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'M100InventoryDatacenters401ErrorException');
                    mappedObject.reason = 'Missing Token';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Missing Token', errorCode: 401, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper().mapObject(response, 'ErrorException');
                    mappedObject.reason = 'Authorization Failed';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Authorization Failed',
                        errorCode: 403,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper().mapObject(response, 'ErrorException');
                    mappedObject.reason = 'Specified object cannot be found';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Specified object cannot be found',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 405) {
                    const mappedObject = _baseController.getObjectMapper().mapObject(response, 'ErrorException');
                    mappedObject.reason = 'Method Not Allowed';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Method Not Allowed',
                        errorCode: 405,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 409) {
                    const mappedObject = _baseController.getObjectMapper().mapObject(response, 'ErrorException');
                    mappedObject.reason = 'Status onflict';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Status onflict', errorCode: 409, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper().mapObject(response, 'ErrorException');
                    mappedObject.reason = 'Request is invalid';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Request is invalid',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }

}

module.exports = DatacentresController;
