/**
 * TelstraProgrammableNetworkAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of Object52
 */
class Object52 extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.briefDescription =
          this.constructor.getValue(obj.briefDescription
     || obj.brief_description);
        this.buyers = this.constructor.getValue(obj.buyers);
        this.classifications = this.constructor.getValue(obj.classifications);
        this.comments = this.constructor.getValue(obj.comments);
        this.createAt = this.constructor.getValue(obj.createAt || obj.create_at);
        this.creator = this.constructor.getValue(obj.creator);
        this.description = this.constructor.getValue(obj.description);
        this.eos = this.constructor.getValue(obj.eos);
        this.flavors = this.constructor.getValue(obj.flavors);
        this.flavorsPrice = this.constructor.getValue(obj.flavorsPrice || obj.flavors_price);
        this.glanceComments = this.constructor.getValue(obj.glanceComments || obj.glance_comments);
        this.glanceImage = this.constructor.getValue(obj.glanceImage || obj.glance_image);
        this.glanceName = this.constructor.getValue(obj.glanceName || obj.glance_name);
        this.glanceProperties =
          this.constructor.getValue(obj.glanceProperties
     || obj.glance_properties);
        this.id = this.constructor.getValue(obj.id);
        this.imageFormat = this.constructor.getValue(obj.imageFormat || obj.image_format);
        this.licenseRequired =
          this.constructor.getValue(obj.licenseRequired
     || obj.license_required);
        this.logo = this.constructor.getValue(obj.logo);
        this.maxPorts = this.constructor.getValue(obj.maxPorts || obj.max_ports);
        this.md5 = this.constructor.getValue(obj.md5);
        this.minPorts = this.constructor.getValue(obj.minPorts || obj.min_ports);
        this.name = this.constructor.getValue(obj.name);
        this.osVersion = this.constructor.getValue(obj.osVersion || obj.os_version);
        this.owner = this.constructor.getValue(obj.owner);
        this.product = this.constructor.getValue(obj.product);
        this.publishDate = this.constructor.getValue(obj.publishDate || obj.publish_date);
        this.restrictVncConsole =
          this.constructor.getValue(obj.restrictVncConsole
     || obj.restrict_vnc_console);
        this.status = this.constructor.getValue(obj.status);
        this.supportHotPlug = this.constructor.getValue(obj.supportHotPlug || obj.support_hot_plug);
        this.tags = this.constructor.getValue(obj.tags);
        this.uploadAt = this.constructor.getValue(obj.uploadAt || obj.upload_at);
        this.vendorName = this.constructor.getValue(obj.vendorName || obj.vendor_name);
        this.zeroDayConfigSpec =
          this.constructor.getValue(obj.zeroDayConfigSpec
     || obj.zero_day_config_spec);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'briefDescription', realName: 'brief_description' },
            { name: 'buyers', realName: 'buyers' },
            {
                name: 'classifications',
                realName: 'classifications',
                array: true,
                type: 'Classification',
            },
            { name: 'comments', realName: 'comments' },
            { name: 'createAt', realName: 'create_at' },
            { name: 'creator', realName: 'creator' },
            { name: 'description', realName: 'description' },
            { name: 'eos', realName: 'eos' },
            { name: 'flavors', realName: 'flavors', array: true, type: 'Flavor' },
            { name: 'flavorsPrice', realName: 'flavors_price' },
            { name: 'glanceComments', realName: 'glance_comments' },
            { name: 'glanceImage', realName: 'glance_image', type: 'GlanceImage' },
            { name: 'glanceName', realName: 'glance_name' },
            { name: 'glanceProperties', realName: 'glance_properties' },
            { name: 'id', realName: 'id' },
            { name: 'imageFormat', realName: 'image_format' },
            { name: 'licenseRequired', realName: 'license_required' },
            { name: 'logo', realName: 'logo' },
            { name: 'maxPorts', realName: 'max_ports' },
            { name: 'md5', realName: 'md5' },
            { name: 'minPorts', realName: 'min_ports' },
            { name: 'name', realName: 'name' },
            { name: 'osVersion', realName: 'os_version' },
            { name: 'owner', realName: 'owner' },
            { name: 'product', realName: 'product', type: 'Product' },
            { name: 'publishDate', realName: 'publish_date' },
            { name: 'restrictVncConsole', realName: 'restrict_vnc_console' },
            { name: 'status', realName: 'status' },
            { name: 'supportHotPlug', realName: 'support_hot_plug' },
            { name: 'tags', realName: 'tags', array: true, type: 'VnfTag' },
            { name: 'uploadAt', realName: 'upload_at' },
            { name: 'vendorName', realName: 'vendor_name' },
            { name: 'zeroDayConfigSpec', realName: 'zero_day_config_spec' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = Object52;
