/**
 * TelstraProgrammableNetworkAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of Params
 */
class Params extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.description = this.constructor.getValue(obj.description);
        this.duration = this.constructor.getValue(obj.duration);
        this.bandwidth = this.constructor.getValue(obj.bandwidth);
        this.latency = this.constructor.getValue(obj.latency);
        this.linkid = this.constructor.getValue(obj.linkid);
        this.contractid = this.constructor.getValue(obj.contractid);
        this.price = this.constructor.getValue(obj.price);
        this.tag = this.constructor.getValue(obj.tag);
        this.connections = this.constructor.getValue(obj.connections);
        this.topologyTagUuid =
          this.constructor.getValue(obj.topologyTagUuid
     || obj.topology_tag_uuid);
        this.billingId = this.constructor.getValue(obj.billingId || obj['billing-id']);
        this.renewalOption = this.constructor.getValue(obj.renewalOption || obj['renewal-option']);
        this.latencySla = this.constructor.getValue(obj.latencySla || obj['latency-sla']);
        this.linkstatus = this.constructor.getValue(obj.linkstatus);
        this.linkType = this.constructor.getValue(obj.linkType || obj['link-type']);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'description', realName: 'description' },
            { name: 'duration', realName: 'duration' },
            { name: 'bandwidth', realName: 'bandwidth' },
            { name: 'latency', realName: 'latency' },
            { name: 'linkid', realName: 'linkid' },
            { name: 'contractid', realName: 'contractid' },
            { name: 'price', realName: 'price' },
            { name: 'tag', realName: 'tag' },
            { name: 'connections', realName: 'connections', array: true },
            { name: 'topologyTagUuid', realName: 'topology_tag_uuid' },
            { name: 'billingId', realName: 'billing-id' },
            { name: 'renewalOption', realName: 'renewal-option' },
            { name: 'latencySla', realName: 'latency-sla' },
            { name: 'linkstatus', realName: 'linkstatus' },
            { name: 'linkType', realName: 'link-type' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = Params;
