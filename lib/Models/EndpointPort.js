/**
 * TelstraProgrammableNetworkAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of EndpointPort
 */
class EndpointPort extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.cabletype = this.constructor.getValue(obj.cabletype);
        this.connectortype = this.constructor.getValue(obj.connectortype);
        this.cfa = this.constructor.getValue(obj.cfa);
        this.endpointuuid = this.constructor.getValue(obj.endpointuuid);
        this.interfacespeed = this.constructor.getValue(obj.interfacespeed);
        this.interfacetype = this.constructor.getValue(obj.interfacetype);
        this.vport = this.constructor.getValue(obj.vport);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'cabletype', realName: 'cabletype' },
            { name: 'connectortype', realName: 'connectortype' },
            { name: 'cfa', realName: 'cfa' },
            { name: 'endpointuuid', realName: 'endpointuuid' },
            { name: 'interfacespeed', realName: 'interfacespeed' },
            { name: 'interfacetype', realName: 'interfacetype' },
            { name: 'vport', realName: 'vport', array: true, type: 'Vport' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = EndpointPort;
